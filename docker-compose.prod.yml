services:
    redis:
        container_name: redis
        image: redis:7.4.1
        volumes:
            - redis_data:/data
        ports:
            - "6379:6379"
        command: redis-server --save 60 1 --loglevel warning

    postgres:
        image: postgres:15
        container_name: postgres
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        ports:
            - "5432:5432"

    backend:
        build:
            context: ./core
            dockerfile: Dockerfile.prod
        container_name: backend
        volumes:
            - ./core:/usr/src/app
            - static_volume:/home/app/core/static
            - media_volume:/home/app/core/media
        expose:
            - "8000"
        environment:
            # role for entrypoint
            - ROLE=backend
            # basic settings
            - SECRET_KEY=${SECRET_KEY}
            - DEBUG=${DEBUG}
            - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
            # password reset timeout for api v1
            - PASSWORD_RESET_TIMEOUT=${PASSWORD_RESET_TIMEOUT}
            # email confirguration
            - EMAIL_BACKEND=${EMAIL_BACKEND}
            - EMAIL_HOST=${EMAIL_HOST}
            - EMAIL_PORT=${EMAIL_PORT}
            - EMAIL_USE_TLS=${EMAIL_USE_TLS}
            - EMAIL_HOST_USER=${EMAIL_HOST_USER}
            - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
            #  database configuration
            - PGDB_ENGINE=${PGDB_ENGINE}
            - PGDB_NAME=${PGDB_NAME}
            - PGDB_USER=${PGDB_USER}
            - PGDB_PASSWORD=${PGDB_PASSWORD}
            - PGDB_HOST=${PGDB_HOST}
            - PGDB_PORT=${PGDB_PORT}
        depends_on:
            - redis
            - postgres
        restart: always

    celery-worker:
        build:
            context: ./core
            dockerfile: Dockerfile.prod
        container_name: celery-worker
        volumes:
            - ./core:/usr/src/app
        environment:
            # role for entrypoint
            - ROLE=celery-worker
            # database configuration
            - PGDB_ENGINE=${PGDB_ENGINE}
            - PGDB_NAME=${PGDB_NAME}
            - PGDB_USER=${PGDB_USER}
            - PGDB_PASSWORD=${PGDB_PASSWORD}
            - PGDB_HOST=${PGDB_HOST}
            - PGDB_PORT=${PGDB_PORT}
        depends_on:
            - redis
            - backend
            - postgres
        restart: always

    celery-beat:
        build:
            context: ./core
            dockerfile: Dockerfile.prod
        container_name: celery-beat
        environment:
            # role for entrypoint
            - ROLE=celery-beat
        volumes:
            - ./core:/usr/src/app
        depends_on:
            - redis
            - backend
            - postgres

    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        container_name: nginx
        ports:
            - "80:80"
        volumes:
            - static_volume:/home/app/core/static
            - media_volume:/home/app/core/media
        depends_on:
            - redis
            - backend
        restart: always

volumes:
    static_volume:
    media_volume:
    postgres_data:
    redis_data:
